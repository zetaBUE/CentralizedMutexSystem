/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ClientSide;

import java.io.*;
import java.net.*;

/**
 *
 * @author zeta440
 */
public class ClientGUI extends javax.swing.JFrame {
    private static final int COORDINATOR_PORT = 2000;
    private static final int STORAGE_PORT_1 = 3000;
    private static final int STORAGE_PORT_2 = 3001;
    private int selectedServerPort;

    /**
     * Creates new form ClientGUI
     */
    public ClientGUI() {
        initComponents();
        selectedServerPort = jComboBox1.getSelectedItem().equals("Gucci") ? STORAGE_PORT_1 : STORAGE_PORT_2;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        viewButton = new javax.swing.JButton();
        nameField = new javax.swing.JTextField();
        qtyField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputField = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(493, 450));

        jLabel1.setFont(new java.awt.Font("Segoe Script", 1, 24)); // NOI18N
        jLabel1.setText("Choose a Store:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gucci", "Chanel" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        addButton.setText("add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        viewButton.setText("view");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        nameField.setText("ProductName");
        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        qtyField.setText("ProductQuantity");
        qtyField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyFieldActionPerformed(evt);
            }
        });

        outputField.setColumns(20);
        outputField.setRows(5);
        jScrollPane1.setViewportView(outputField);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(88, 88, 88)
                                                .addComponent(jLabel1)
                                                .addGap(18, 18, 18)
                                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 112,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(79, 79, 79)
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jScrollPane1,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 335,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(
                                                                        javax.swing.GroupLayout.Alignment.TRAILING)
                                                                        .addComponent(deleteButton)
                                                                        .addComponent(addButton)
                                                                        .addComponent(viewButton))
                                                                .addGap(89, 89, 89)
                                                                .addGroup(layout.createParallelGroup(
                                                                        javax.swing.GroupLayout.Alignment.LEADING,
                                                                        false)
                                                                        .addComponent(qtyField)
                                                                        .addComponent(nameField))))))
                                .addContainerGap(79, Short.MAX_VALUE)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 32,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(addButton)
                                        .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(deleteButton)
                                        .addComponent(qtyField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(viewButton)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(76, Short.MAX_VALUE)));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String productName = nameField.getText().trim();
            String quantityStr = qtyField.getText().trim();

            if (productName.isEmpty() || quantityStr.isEmpty()) {
                outputField.setText("Please enter both product name and quantity");
                return;
            }

            int quantity;
            try {
                quantity = Integer.parseInt(quantityStr);
                if (quantity <= 0) {
                    outputField.setText("Quantity must be positive");
                    return;
                }
            } catch (NumberFormatException e) {
                outputField.setText("Invalid quantity format");
                return;
            }

            try (Socket coordinatorSocket = new Socket("localhost", COORDINATOR_PORT);
                    DataOutputStream coordinatorOut = new DataOutputStream(coordinatorSocket.getOutputStream());
                    DataInputStream coordinatorIn = new DataInputStream(coordinatorSocket.getInputStream())) {

                coordinatorOut.writeUTF("ADD " + selectedServerPort);
                String response = coordinatorIn.readUTF();

                if ("ALLOWED".equals(response)) {
                    try (Socket storageSocket = new Socket("localhost", selectedServerPort);
                            DataOutputStream storageOut = new DataOutputStream(storageSocket.getOutputStream());
                            DataInputStream storageIn = new DataInputStream(storageSocket.getInputStream())) {

                        String command = "ADD " + productName + " " + quantity;
                        storageOut.writeUTF(command);
                        String storageResponse = storageIn.readUTF();
                        outputField.setText(storageResponse);
                    }

                    coordinatorOut.writeUTF("DONE");
                } else {
                    outputField.setText("Access denied by coordinator");
                }
            }
        } catch (IOException e) {
            outputField.setText("Error: " + e.getMessage());
        }
    }

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String productName = nameField.getText().trim();
            String quantityStr = qtyField.getText().trim();

            if (productName.isEmpty() || quantityStr.isEmpty()) {
                outputField.setText("Please enter both product name and quantity");
                return;
            }

            int quantity;
            try {
                quantity = Integer.parseInt(quantityStr);
                if (quantity <= 0) {
                    outputField.setText("Quantity must be positive");
                    return;
                }
            } catch (NumberFormatException e) {
                outputField.setText("Invalid quantity format");
                return;
            }

            try (Socket coordinatorSocket = new Socket("localhost", COORDINATOR_PORT);
                    DataOutputStream coordinatorOut = new DataOutputStream(coordinatorSocket.getOutputStream());
                    DataInputStream coordinatorIn = new DataInputStream(coordinatorSocket.getInputStream())) {

                coordinatorOut.writeUTF("DELETE " + selectedServerPort);
                String response = coordinatorIn.readUTF();

                if ("ALLOWED".equals(response)) {
                    try (Socket storageSocket = new Socket("localhost", selectedServerPort);
                            DataOutputStream storageOut = new DataOutputStream(storageSocket.getOutputStream());
                            DataInputStream storageIn = new DataInputStream(storageSocket.getInputStream())) {

                        String command = "DELETE " + productName + " " + quantity;
                        storageOut.writeUTF(command);
                        String storageResponse = storageIn.readUTF();
                        outputField.setText(storageResponse);
                    }

                    coordinatorOut.writeUTF("DONE");
                } else {
                    outputField.setText("Access denied by coordinator");
                }
            }
        } catch (IOException e) {
            outputField.setText("Error: " + e.getMessage());
        }
    }

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            try (Socket coordinatorSocket = new Socket("localhost", COORDINATOR_PORT);
                    DataOutputStream coordinatorOut = new DataOutputStream(coordinatorSocket.getOutputStream());
                    DataInputStream coordinatorIn = new DataInputStream(coordinatorSocket.getInputStream())) {

                coordinatorOut.writeUTF("VIEW " + selectedServerPort);
                String response = coordinatorIn.readUTF();

                if ("ALLOWED".equals(response)) {
                    try (Socket storageSocket = new Socket("localhost", selectedServerPort);
                            DataOutputStream storageOut = new DataOutputStream(storageSocket.getOutputStream());
                            DataInputStream storageIn = new DataInputStream(storageSocket.getInputStream())) {

                        storageOut.writeUTF("VIEW");
                        String storageResponse = storageIn.readUTF();
                        outputField.setText("Storage Contents:\n" + storageResponse);
                    }

                    coordinatorOut.writeUTF("DONE");
                } else {
                    outputField.setText("Access denied by coordinator");
                }
            }
        } catch (IOException e) {
            outputField.setText("Error: " + e.getMessage());
        }
    }

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_nameFieldActionPerformed

    private void qtyFieldActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_qtyFieldActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_qtyFieldActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {
        selectedServerPort = jComboBox1.getSelectedItem().equals("Gucci") ? STORAGE_PORT_1 : STORAGE_PORT_2;
        outputField.setText("Selected server: " + (selectedServerPort == STORAGE_PORT_1 ? "Gucci" : "Chanel"));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameField;
    private javax.swing.JTextArea outputField;
    private javax.swing.JTextField qtyField;
    private javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables
}
